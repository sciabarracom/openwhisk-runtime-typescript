#!/usr/bin/env node
/*
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
*/
const path = require("path")
const fs = require("fs")

// write a file creating intermediate directories
function write_file(file, body, executable) {
    fs.mkdirSync(path.dirname(file), {recursive: true})
    fs.writeFileSync(file, body)
    if(executable)
        fs.chmodSync(path, 0755)
}

// copy a file eventually replacing a substring
function copy_replace(src, dst, match, replacement) {
    var body = fs.readFileSync(src, "utf-8")
    if(match) 
        body = body.replace(match, replacement)
    write_file(dst, body)
}

function deext(filename) {
    var pos = filename.lastIndexOf(".")
    filename = pos > -1 ? filename.substring(0, pos) : filename
}

// resolve dependencies from package.json - return the main
function dependencies(src_dir) {
  var pkg_config = src_dir+"/package.json"
  if(fs.existsSync(pkg_config)) {
      // TODO: yarn
     var config = JSON.parse(fs.readFileSync(pkg_config, "utf-8"))
     if("main" in config)
        return deext(config["main"])
  }
  return "main"
}

// assemble sources
function sources(launcher, main, src_dir) {
    // init config
    src_config = src_dir+"/tsconfig.json"
    var config = {}
    if(fs.existsSync(src_config)) {
        config = JSON.parse(fs.readFileSync(src_config, "utf-8"))
    }
    if(!("files" in config)) config["files"] = []
    if(!("compilerOptions" in config)) config["compilerOptions"] = {}
    config["compilerOptions"]["module"] = "system" 
    config["compilerOptions"]["removeComments"] = true
    config["compilerOptions"]["sourceMap"] = true
     
    // copy main src file if any (and use it as main)
    var src_file = src_dir+"/exec"
    if(fs.existsSync(src_file)){
        fs.renameSync(src_file, src_dir+"/main__.ts")
        config["files"].push("main__.ts")
        main = "main__"
    }

    // copy launcher
    copy_replace(launcher, 
       src_dir+"/exec__.ts",
      `require("./main__")`,
      `require("./`+main+`")`)
    config["files"].push("exec__.ts")

    // complete tsconfig.json
    config["compilerOptions"]["outFile"] = "../bin/exec.js"
    write_file(src_config, JSON.stringify(config))
}

function build(src, bin) {
    console.log(src, bin)
}

if(process.argv.length<4) {
    console.log("usage: <main-function> <source-dir> <target-dir>")
    process.exit(1)
}
var launcher =  path.dirname(path.dirname(process.argv[1]))+"/lib/launcher.ts"
var main_func = process.argv[2]
var src_dir = path.resolve(process.argv[3])
var bin_dir = path.resolve(process.argv[4])
var main = dependencies(src_dir)
sources(launcher, main, src_dir)
build(src_dir, bin_dir)
